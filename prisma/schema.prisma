// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ENUMS

enum UserRole {
  ADMIN
  EMPLOYER
  CANDIDATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}

enum ApplicationStatus {
  APPLIED
  REVIEWED
  SHORTLISTED
  REJECTED
  HIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TwoFactorMethod {
  EMAIL
  SMS
  AUTH_APP
}


// MODELS

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique        
  passwordHash     String
  role             UserRole @default(CANDIDATE)
  phone            String?  @unique
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  jobs           Job[]          @relation("UserJobs")
  applications   Application[]   @relation("UserApplications")
  resumes        Resume[]
  payments       Payment[]
  twoFactors     TwoFactor[]
  refreshTokens  RefreshToken[]
}

model Job {
  id             String   @id @default(uuid())
  title          String
  description    String
  requirements   String?
  location       String?
  type           JobType
  salaryMin      Int?
  salaryMax      Int?
  isPaidPost     Boolean   @default(false)
  postedById     String
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  postedBy       User      @relation("UserJobs", fields: [postedById], references: [id])
  applications   Application[]
  payments       Payment[]

  @@index([postedById])      // fetch employer’s jobs fast
  @@index([isActive])        // filter only active jobs
}

model Application {
  id             String            @id @default(uuid())
  jobId          String
  applicantId    String
  resumeId       String?
  coverLetter    String?
  status         ApplicationStatus @default(APPLIED)
  createdAt      DateTime          @default(now())

  job            Job     @relation(fields: [jobId], references: [id])
  applicant      User    @relation("UserApplications", fields: [applicantId], references: [id])
  resume         Resume? @relation(fields: [resumeId], references: [id])

  @@index([jobId])           // list all applications for a job
  @@index([applicantId])     // list candidate’s applications
}

model Resume {
  id          String   @id @default(uuid())
  userId      String
  title       String
  summary     String?
  experiences Json?
  skills      String?
  pdfUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  applications Application[]

  @@index([userId])
}

model Payment {
  id             String        @id @default(uuid())
  userId         String
  jobId          String?
  amount         Int
  currency       String         @default("USD")
  provider       String
  status         PaymentStatus  @default(PENDING)
  createdAt      DateTime       @default(now())

  user           User           @relation(fields: [userId], references: [id])
  job            Job?           @relation(fields: [jobId], references: [id])

  @@index([userId])
}

model TwoFactor {
  id          String          @id @default(uuid())
  userId      String
  method      TwoFactorMethod
  secret      String?
  enabled     Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

model RefreshToken {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  expiresAt   DateTime
  issuedAt    DateTime  @default(now())
  isRevoked   Boolean   @default(false)
  ipAddress   String?
  userAgent   String?

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}
